https://github.com/alfonsotech/session-notes

Aggregates
-- find the total number of cats
SELECT COUNT(*) AS total_cats FROM cats;

--Find the average price of toys
SELECT AVG(price) AS average_toy_price FROM toys;


-- Find the most expensive toy
SELECT MAX(price) AS most_expensive_toy FROM toys;


-- ???
SELECT cats.name, COUNT(cat_toys.toy_id) AS toy_count
FROM cats
LEFT JOIN cat_toys ON cats.id = cat_toys.cat_id
GROUP BY cats.id;

-- Find the total value of toys for each cat
SELECT cats.name, SUM(toys.price) AS total_toy_value
FROM cats
JOIN cat_toys ON cats.id = cat_toys.cat_id
JOIN toys ON cat_toys.toy_id = toys.id
GROUP BY cats.id;


Subqueries
SELECT AVG(price) AS average_toy_price FROM toys;

-- the names of all cats that have a toy named 'Mouse'
SELECT name
FROM cats
WHERE id IN (
    SELECT cat_id
    FROM cat_toys
    WHERE toy_id = (SELECT id FROM toys WHERE name = 'Mouse')
);


--the name and color of cats that have more than 3 toys
SELECT name, color
FROM cats
WHERE id IN (
    SELECT cat_id
    FROM cat_toys
    GROUP BY cat_id
    HAVING COUNT(*) > 3
)
LIMIT 10;


N+1
An N+1 query is where you execute one initial query to retrieve a set of results, and then for each of those results, you execute an additional query. This leads to N+1 total queries, where N is the number of results from the initial query.

Inefficient:  N+1 queries are inefficient because they result in multiple round trips to the database. Each additional query adds overhead in terms of network latency and database processing time. As the number of results grows, the performance degradation becomes more pronounced, leading to slower response times and increased server load.

SQL Indexes
A SQL index is a data structure that improves the speed of data retrieval operations on database tables. 
- It acts like a lookup table, allowing the database engine to quickly locate rows with specific column values without scanning the entire table. 
- But it increases the time it takes to both insert and delete a record.
- Use when lookups will outnumber inserts and deletions. 
- Don't use on small tables or frequently updated tables.

Good index: 
```sql 
CREATE INDEX idx_cats_name ON cats(name);
``` 
Potentially unnecessary: 
```sql
CREATE INDEX idx_toys_color ON toys(color);
```
Useful for joins: 
```sql 
CREATE INDEX idx_cat_toys_cat_id ON cat_toys(cat_id);
```

Question: When to use Subqueries, Joins, or Indexes. seems like there are 3 diff ways of doing same thing?

Joins: when you need to combine data from multiple tables in a single result set.

Subqueries: for complex filtering or calculations. Subqueries are useful for complex logic that can't be easily expressed with joins.

Indexes: Used to improve query performance, especially for large tables, but don't change the actual query structure.



Big O Notation Review
O(1) represents constant time complexity. This means that regardless of the input size, the operation always takes the same amount of time. It's the most efficient time complexity possible.

O(log n) represents logarithmic time complexity. As the input size increases, the time taken by the algorithm grows, but at a much slower rate than linear growth. This is very efficient for large datasets.


SQL Injections
Benchmarking 4-Step Process
